package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"graphql-basic/graph/model"
	"log"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	log.Println("YEYYYY BERHASILLLL")
	return &model.User{
		ID:      "1",
		Name:    input.Name,
		Dob:     input.Dob,
		Address: input.Address,
	}, nil
}

// EditPostion is the resolver for the editPostion field.
func (r *mutationResolver) EditPostion(ctx context.Context, input model.EditPostion) (*model.User, error) {
	log.Println("ASSIIIKKK")
	return &model.User{
		ID:      input.ID,
		Name:    "nasrul",
		Dob:     "2000-08-07",
		Address: "Jl. Nangka",
		Position: &model.Position{
			ID:          "2",
			UserID:      input.ID,
			PostionName: input.PostionName,
			Salary:      input.Salary,
		},
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	log.Println("GEEETTTTTT")
	return []*model.User{{
		ID:      "1",
		Name:    "nasrul",
		Dob:     "2000-08-07",
		Address: "Jl. Nangka",
		Position: &model.Position{
			ID:          "2",
			UserID:      "1",
			PostionName: "backend",
			Salary:      "2000000",
		},
	}}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
